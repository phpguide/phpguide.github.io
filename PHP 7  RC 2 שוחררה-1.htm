<!DOCTYPE html>
<html lang="he" itemscope="" itemtype="http://schema.org/Article" ng-app="phpg">
<head>
<base href="https://phpguide.co.il/">
<meta charset="utf-8">
<meta name="description" content="הדור הבא של המנוע המפורסם שוחרר,למד מהם השינויים והחידושים שהגיעו לשפה.">
<meta name="keywords" content="PHP,PHP 7">
<meta name="author" content="Splash">
<link rel="shortcut icon" href="static\images\favicon-1.ico">
<!--[if lt IE 9]><script src="//html5shim.googlecode.com/svn/trunk/html5.js"></script><![endif]-->
<link rel="stylesheet" type="text/css" href="static\styles\allstyles.compiled.css">
<title>PHP 7 שוחררה</title>
<meta itemprop="name" content="PHP 7 שוחררה">
<meta itemprop="description" content="הדור הבא של המנוע המפורסם שוחרר,למד מהם השינויים והחידושים שהגיעו לשפה.">
</head>
<body dir='rtl' class="article"><script type="text/javascript">window.phpgstate={"post":{"id":"381","rating":"12","hasCurrentUserVoted":false}};</script>
<div class='page-container'>
<section id='header'>
<div class="topRowHolder">
<a class="logo" href="index-3.htm"><img src="static\images\logo.jpg"></a>
<nav class="main">
<ul>
<li><a href="index-3.htm" class="active">פוסטים</a></li>
<li><a href="qna-1.htm">פורום</a></li>
</ul>
<div class="clear"></div>
</nav> <div class="clear"></div>
</div>
</section>  
<div class="layout-holder">
<section id="content">
<h1 class='content-title'><span></span>PHP 7 שוחררה</h1>
 
<div id="content-publishing-info">
<div class="right">Splash, </div>
<div class="right">&nbsp;<time datetime="2015-09-04T12:40:35+03:00" dir="rtl">04 לספטמבר 2015</time></div>
<div class="clear"></div>
</div>
 
<article>
<header>
<div class="right post-image">
<img src="static\images\pixel.png" title="https://secure.php.net/images/logo.php" alt="PHP 7 שוחררה">
</div>
<div class="right post-content">
הדור הבא של המנוע המפורסם שוחרר,למד מהם השינויים והחידושים שהגיעו לשפה. <br>
</div>
<div class="clear"></div>
</header>
<br><br>
עברה יותר משנה מאז שהוכרזה <a href="הגירסא הבאה של php תיהיה php 7 .htm">הגירסא הבאה של PHP </a> במהלך השנה הזו קויימו דיונים רבים לגבי החידושים שהיא אמורה להביא.<br><s>המנוע החדש אמור להגיע אלינו סופית עד ה-26 בנובמבר השנה,עוד כחודשיים מהיום כאשר הדבר היחיד שידחה את הפתיחה החגיגית היא באגים שהמפתחים לא יצליחו לפתור בזמן.</s><br>הגירסא שוחחרה בתאריך 3 בדצמבר 2015,במאמר זה נכיר את הדברים החדשים שנוספו לשפה אז בואו נתחיל.<br><br><h3>ביצועים ביצועים ועוד קצת ביצועים </h3><br><br>מה שהיה ידוע כבר לפני שנה הוכח ברגע שיצאה הגירסא הראשונה - המנוע החדש הוא המהיר ביותר שפותח עד היום.המנוע החדש מהיר עד כ- פי 2 מהמנוע הנוכחי [5.6] בלי לשנות אפילו שורה אחת של קוד וזאת תודות בעיקר ל PHPNG.<br><br><h3>The null coalescing operator</h3><br>כולנו מכירים את החלק הזה שאנחנו צריכים לבדוק האם המשתנה מוגדר לפני שמשתמשים בו,פעולה שמרגישה קצת העתק-הדבק.<br>כעט הקוד - <br><div class="php codeblock"><span class="re0">$slug</span> <span class="sy0">=</span> <span class="kw3">isset</span><span class="br0">&#40;</span><span class="re0">$_GET</span><span class="br0">&#91;</span><span class="st_h">'slug'</span><span class="br0">&#93;</span><span class="br0">&#41;</span> ? <span class="re0">$_GET</span><span class="br0">&#91;</span><span class="st_h">'slug'</span><span class="br0">&#93;</span> <span class="sy0">:</span> <span class="st_h">''</span><span class="sy0">;</span></div><br>יכול להפוך ל -<br><div class="php codeblock"><span class="re0">$slug</span> <span class="sy0">=</span> &nbsp;<span class="re0">$_GET</span><span class="br0">&#91;</span><span class="st_h">'slug'</span><span class="br0">&#93;</span> ?? <span class="st_h">''</span><span class="sy0">;</span></div><br><br><h3>Combined Comparison AKA Spaceship Operator</h3><br>עוד אופרטור חדש שנכנס למנוע הוא האופרטור &quot;חללית&quot; בשל צורתו שמזכירה ציור של חללית.<br>הקוד - <br><div class="php codeblock"><span class="re0">$id</span> <span class="sy0">&lt;=&gt;</span> <span class="re0">$second_id</span></div><br>יכול להחזיר לנו שלושה מספרים 1 [אחד] ,0 [אפס] ,-1 [מינוס אחד] ויכול לעזור לנו כאשר אנו רוצים לבדוק שוויון בין שני משתנים.<br>-1 [מינוס אחד] יוחזר כאשר id קטן מ- second_id.<br>0 [אפס] יוחזר כאשר שני המשתנים שווים אחד לשני.<br>1 [אחד] יוחזר מתי ש id גדול מ second_id.<br><br><h3>משתנים סקלרים</h3><br>כבר הרבה זמן שאנחנו יכולים להגדיר לפונקציה לקבל רק interface מסויים או רק אוביקט מסויים.<br>החל מ php 7 יהיה ניתן להגדיר פונקציה שתקבל כל משתנה סקלארי.<br>כלומר מהיום נוכל להגדיר תנאי כניסה לפונקציה הוא שהשמתנה חייב להיות מספר שלם ולתת למנוע לבדוק עבורנו אם הוא מספר.<br><br>לדוגמא אם בעבר היינו צריכים לכתוב משהו כזה -<br><div class="php codeblock"><span class="kw2">public</span> <span class="kw2">function</span> setID<span class="br0">&#40;</span><span class="re0">$id</span><span class="br0">&#41;</span><span class="br0">&#123;</span><br>
&nbsp; &nbsp; <span class="kw1">if</span><span class="br0">&#40;</span><span class="sy0">!</span><span class="kw3">is_int</span><span class="br0">&#40;</span><span class="re0">$id</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br>
&nbsp; &nbsp; &nbsp; <span class="kw1">throw</span> <span class="kw2">new</span> Exception<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span><br>
&nbsp; &nbsp; <span class="re0">$this</span><span class="sy0">-&gt;</span><span class="me1">id</span> <span class="sy0">=</span> <span class="re0">$id</span><span class="sy0">;</span><br>
&nbsp; &nbsp; <span class="kw1">return</span> <span class="re0">$this</span><span class="sy0">;</span><br>
&nbsp; <span class="br0">&#125;</span></div><br>היום נוכל לכתוב <br><div class="php codeblock"><span class="kw2">public</span> <span class="kw2">function</span> setID<span class="br0">&#40;</span>int <span class="re0">$id</span><span class="br0">&#41;</span><span class="br0">&#123;</span><br>
&nbsp; &nbsp; <span class="re0">$this</span><span class="sy0">-&gt;</span><span class="me1">id</span> <span class="sy0">=</span> <span class="re0">$id</span><span class="sy0">;</span><br>
&nbsp; &nbsp; <span class="kw1">return</span> <span class="re0">$this</span><span class="sy0">;</span><br>
&nbsp; <span class="br0">&#125;</span></div><br>והמנוע כבר יזרוק עבורנו את השגיאה TypeException.<br><br><h3>החזרת טיפוס מפונקציה</h3><br>שינוי נוסף במבנה של הפונקציה מאפשר לנו היום לדרוש מפונקציה להחזיר טיפוס מסויים.<br>לדוגמא אם אנחנו יודעים שפונקציה מסויימת חייבת להחזיר לנו int נכתוב אותה כך -<br><div class="php codeblock"><span class="kw2">function</span> ReturnINT<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">:</span> int <span class="br0">&#123;</span><br>
&nbsp; &nbsp; <br>
<span class="br0">&#125;</span></div><br>גם כאן,במידה ולא נחזיר את הטיפוס שהגדרנו תזרק השגיאה TypeException.<br>החיסרון הוא שניתן להחזיר רק טיפוס אחד כך שאם יש פונקציה שיכולה להחזיר int או false לא נוכל להגדיר את הפונקציה כמו שצריך ונצטרך להשאיר אותה במתכונת הישנה.<br><br><h3>Group use Declarations</h3><br>שינוי שיקל עוד טיפה בכתיבה שלנו היא אפשרות להכליל מספר נתיבים תחת &quot;use&quot; אחד.<br>כך שהקוד -<br><div class="php codeblock"><span class="kw2">use</span> App\ClassA<span class="sy0">;</span><br>
<span class="kw2">use</span> App\ClassB<span class="sy0">;</span></div><br>יכול להיכתב גם כך -<br><div class="php codeblock"><span class="kw2">use</span> App\<span class="br0">&#123;</span>ClassA<span class="sy0">,</span> ClassB<span class="br0">&#125;</span><span class="sy0">;</span></div><br><br>אני אישית עדיין לא סגור כמה הכתיבה הזאת נוחה אבל אין ספק בכלל שהפתרון יותר טוב מאשר לבצע העתק-הדבק כאשר מדובר בהרבה תת - namespace-ים<br>אגב השינוי הוא כללי למילה &quot;use&quot; באותה מידה שהוא טופס על מחלקות הוא טופס גם עבור ממשקים,פונקציות וקבועים.<br><br><h3>מחלקה אנונימית</h3><br>סוג של הגדרת מחלקה in-line,כתיבה קצת מסוכנת ,הייתי מגדיר כאן כלל לשימוש - רק למחלקות שצריכות להיות מוגדרות פעם אחת וגם אז לשים אולי סינון כל שהוא.<br><br><div class="php codeblock"><span class="kw3">var_dump</span><span class="br0">&#40;</span><span class="kw2">new</span> <span class="kw2">class</span><span class="br0">&#40;</span><span class="re0">$i</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br>
&nbsp; &nbsp; <span class="kw2">public</span> <span class="kw2">function</span> __construct<span class="br0">&#40;</span><span class="re0">$i</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="re0">$this</span><span class="sy0">-&gt;</span><span class="me1">i</span> <span class="sy0">=</span> <span class="re0">$i</span><span class="sy0">;</span><br>
&nbsp; &nbsp; <span class="br0">&#125;</span><br>
<span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span></div><br><br><h3>שינויים בהתמודדות עם שגיאות</h3><br><br>אם בעבר היה נורא קשה לתפוס שגיאות שקורות בעקבות שגיאות בקוד עצמו כמו לשכוח נקודה פסיק בסוף משפט או יציאה מגבולות המערך השינוי הוסיף המון סוגים חדשים של שגיאות שמקל עלינו את ההתמודדות מול אותם שגיאות.<br><br>אם בעבר ההגדרה הכללית עבור שגיאה עבורנו הייתה המחלקה &quot;Exception&quot; היום כל שגיאה מוגדרת ע&quot;י הממשק &quot;Throwable&quot; כך שאם נרצה לתפוס כל שגיאה אפשרית נבצע זאת כך - <br><br><div class="php codeblock">try <span class="br0">&#123;</span><br>
<span class="co1">//Some code goes here</span><br>
<span class="br0">&#125;</span> catch <span class="br0">&#40;</span>Throwable <span class="re0">$t</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br>
&nbsp; &nbsp; <span class="co1">// Handle exception</span><br>
<span class="br0">&#125;</span></div><br><br><br>המבנה החדש נראה כך -<br><div class="php codeblock">\Throwable<br>
├── \Exception <span class="br0">&#40;</span>implements \Throwable<span class="br0">&#41;</span><br>
│ &nbsp; ├── \LogicException <span class="br0">&#40;</span><span class="kw2">extends</span> \Exception<span class="br0">&#41;</span><br>
│ &nbsp; │ &nbsp; ├── \BadFunctionCallException <span class="br0">&#40;</span><span class="kw2">extends</span> \LogicException<span class="br0">&#41;</span><br>
│ &nbsp; │ &nbsp; │ &nbsp; └── \BadMethodCallException <span class="br0">&#40;</span><span class="kw2">extends</span> \BadFunctionCallException<span class="br0">&#41;</span><br>
│ &nbsp; │ &nbsp; ├── \DomainException <span class="br0">&#40;</span><span class="kw2">extends</span> \LogicException<span class="br0">&#41;</span><br>
│ &nbsp; │ &nbsp; ├── \InvalidArgumentException <span class="br0">&#40;</span><span class="kw2">extends</span> \LogicException<span class="br0">&#41;</span><br>
│ &nbsp; │ &nbsp; ├── \LengthException <span class="br0">&#40;</span><span class="kw2">extends</span> \LogicException<span class="br0">&#41;</span><br>
│ &nbsp; │ &nbsp; └── \OutOfRangeException <span class="br0">&#40;</span><span class="kw2">extends</span> \LogicException<span class="br0">&#41;</span><br>
│ &nbsp; └── \RuntimeException <span class="br0">&#40;</span><span class="kw2">extends</span> \Exception<span class="br0">&#41;</span><br>
│ &nbsp; &nbsp; &nbsp; ├── \OutOfBoundsException <span class="br0">&#40;</span><span class="kw2">extends</span> \RuntimeException<span class="br0">&#41;</span><br>
│ &nbsp; &nbsp; &nbsp; ├── \OverflowException <span class="br0">&#40;</span><span class="kw2">extends</span> \RuntimeException<span class="br0">&#41;</span><br>
│ &nbsp; &nbsp; &nbsp; ├── \RangeException <span class="br0">&#40;</span><span class="kw2">extends</span> \RuntimeException<span class="br0">&#41;</span><br>
│ &nbsp; &nbsp; &nbsp; ├── \UnderflowException <span class="br0">&#40;</span><span class="kw2">extends</span> \RuntimeException<span class="br0">&#41;</span><br>
│ &nbsp; &nbsp; &nbsp; └── \UnexpectedValueException <span class="br0">&#40;</span><span class="kw2">extends</span> \RuntimeException<span class="br0">&#41;</span><br>
└── \Error <span class="br0">&#40;</span>implements \Throwable<span class="br0">&#41;</span><br>
&nbsp; &nbsp; ├── \AssertionError <span class="br0">&#40;</span><span class="kw2">extends</span> \Error<span class="br0">&#41;</span><br>
&nbsp; &nbsp; ├── \ParseError <span class="br0">&#40;</span><span class="kw2">extends</span> \Error<span class="br0">&#41;</span><br>
&nbsp; &nbsp; └── \TypeError <span class="br0">&#40;</span><span class="kw2">extends</span> \Error<span class="br0">&#41;</span></div><br><em>המבנה נלקח מ DAVEY SHAFIK</em><br><br>כפי שניתן לראות נוספו המון שגיאות חדשות בין היתר TypeError שכבר הראינו למעלה מקרים בהם הוא נזרק.<br>את Throwable לא נוכל לממש במחלקה משלנו,מדובר בממשק סגור עבור Exception ו Error,על מנת ליצור חריג משלנו נצטרך להחליט האם מדובר ב&quot;שגיאה&quot; או &quot;חריג&quot;.<br><br>השינוי לא אמור להשפיע על מערכות קיימות מאחר והשגיאות שמגיעות מהמנוע לא ממשות את Exception אלה את Error. <br><br><h3>תוספות ל Generators</h3><br><br>שתי פיצ&apos;רים חדשים שנוספו לפונקציות מסוג זה -<br><h4>1.שימוש ב return</h4><br>החל מ php 7 יהיה ניתן להחזיר ערך מפונקציית generator,בגירסאות ישנות יותר הדבר יזרוק שגיאה.<br>את הערך שהוחזר ניתן לקבל ע&quot;י שימוש במתודה <strong>getReturn</strong> ניתן להשתמש בפונקציה רק כאשר הפונקציה החזירה ערך במידה וננסה להשתמש בפונקציה <strong>getReturn</strong> תוך כדי שהפונקציית generator עדיין מחזירה ערכים מ yield נקבל שגיאה.<br><br><h4>2.Generator Delegation</h4><br>הפיצ&apos;ר מאפשר לנו לקרוא מפונקציית generator למבנה אחר שמממש את הממשק iterable כלומר - מערך ,iterator או פונקציית generator אחרת.<br><br>דוגמא שממשת את שתי האפשרויות החדשות - <br><div class="php codeblock"><span class="kw2">&lt;?php</span><br>
&nbsp;<br>
<span class="kw2">function</span> g1<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br>
&nbsp; yield <span class="nu0">2</span><span class="sy0">;</span><br>
&nbsp; yield <span class="nu0">3</span><span class="sy0">;</span><br>
&nbsp; <span class="kw1">return</span> <span class="nu0">42</span><span class="sy0">;</span><br>
<span class="br0">&#125;</span><br>
&nbsp;<br>
<span class="kw2">function</span> g2<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br>
&nbsp; yield <span class="nu0">1</span><span class="sy0">;</span><br>
&nbsp; <span class="re0">$g1result</span> <span class="sy0">=</span> yield from g1<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span><br>
&nbsp; yield <span class="nu0">4</span><span class="sy0">;</span><br>
&nbsp; <span class="kw1">return</span> <span class="re0">$g1result</span><span class="sy0">;</span><br>
<span class="br0">&#125;</span><br>
&nbsp;<br>
<span class="re0">$g</span> <span class="sy0">=</span> g2<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span><br>
<span class="kw1">foreach</span> <span class="br0">&#40;</span><span class="re0">$g</span> <span class="kw1">as</span> <span class="re0">$yielded</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br>
&nbsp; &nbsp; <span class="kw3">var_dump</span><span class="br0">&#40;</span><span class="re0">$yielded</span><span class="br0">&#41;</span><span class="sy0">;</span><br>
<span class="br0">&#125;</span><br>
<span class="kw3">var_dump</span><span class="br0">&#40;</span><span class="re0">$g</span><span class="sy0">-&gt;</span><span class="me1">getReturn</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span><br>
&nbsp;<br>
<span class="coMULTI">/*<br>
int(1)<br>
int(2)<br>
int(3)<br>
int(4)<br>
int(42)<br>
*/</span></div><br>נלקח מה-<a href="https://wiki.php.net/rfc/generator-delegation#basic_examples">RFC</a><br><br><h3>מפרש משמאל לימין</h3><br>החל מהגירסאות החדשות של PHP המנוע ינסה לפרש כמה שהוא יכול משמאל לימין כלומר אם הקוד -<br><div class="php codeblock"><span class="re0">$$foo</span><span class="br0">&#91;</span><span class="st_h">'bar'</span><span class="br0">&#93;</span><span class="br0">&#91;</span><span class="st_h">'baz'</span><span class="br0">&#93;</span></div><br>בעבר היה מפורש כ - <br><div class="php codeblock">$<span class="br0">&#123;</span><span class="re0">$foo</span><span class="br0">&#91;</span><span class="st_h">'bar'</span><span class="br0">&#93;</span><span class="br0">&#91;</span><span class="st_h">'baz'</span><span class="br0">&#93;</span><span class="br0">&#125;</span></div><br><br>החל מ php 7 הוא יפורש כך -<br><div class="php codeblock"><span class="br0">&#40;</span><span class="re0">$$foo</span><span class="br0">&#41;</span><span class="br0">&#91;</span><span class="st_h">'bar'</span><span class="br0">&#93;</span><span class="br0">&#91;</span><span class="st_h">'baz'</span><span class="br0">&#93;</span></div><br>כך שהוא קודם מקבל את הערך של foo לדוגמא A ואז משתמש במערך A ומחפש בתוכו את [&apos;bar&apos;][&apos;baz]<br><br>גם הקוד - <br><div class="php codeblock"><span class="re0">$foo</span><span class="sy0">-&gt;</span><span class="re0">$bar</span><span class="br0">&#91;</span><span class="st_h">'baz'</span><span class="br0">&#93;</span></div><br>שבעבר היה מפורש כך -<br><div class="php codeblock"><span class="re0">$foo</span><span class="sy0">-&gt;</span><span class="br0">&#123;</span><span class="re0">$bar</span><span class="br0">&#91;</span><span class="st_h">'baz'</span><span class="br0">&#93;</span><span class="br0">&#125;</span></div><br><br>מפורש כעט כך - <br><div class="php codeblock"><span class="br0">&#40;</span><span class="re0">$foo</span><span class="sy0">-&gt;</span><span class="re0">$bar</span><span class="br0">&#41;</span><span class="br0">&#91;</span><span class="st_h">'baz'</span><span class="br0">&#93;</span></div><br><br>כמובן שלא ניתן לסקר את כל האפשרויות החדשות שנוספו לשפה אך אלה ללא ספק &quot;הגדולים ביותר&quot; מידע נוסף על כל השינויים שקרו ניתן למצוא בקובץ <a href="https://github.com/php/php-src/blob/php-7.0.0RC2/UPGRADING">UPGRADING</a> </article>
<br><br>
<div class="info_box" data-ng-controller="PostViewCtrl">
<div class="right left-spaced">
<img src="static\images\pixel.png" title="http://www.gravatar.com/avatar/f032a456f986ab5afe0da9fd5706f3c3?s=16&r=g&d=monsterid" alt="Splash">
<a>Splash</a>
</div>
<div class="clear"></div>
</div>
<div>
</div>
<section class="comments" id='post_comments'>
<h2>תגובות לכתבה:</h2>
<a id="comment2838"></a>
<div class="blog-comment">
<span class='comment-author'>intval</span><span dir="rtl">&nbsp;</span>
<span dir="ltr" class='comment-date'>05/09/2015 12:20</span><br>
מגניב, תודה :)</div>
<a id="comment2839"></a>
<div class="blog-comment">
<span class='comment-author'>Ben</span><span dir="rtl">&nbsp;</span>
<span dir="ltr" class='comment-date'>05/09/2015 13:02</span><br>
תודה :)</div>
<a id="comment2840"></a>
<div class="blog-comment">
<span class='comment-author'>tra</span><span dir="rtl">&nbsp;</span>
<span dir="ltr" class='comment-date'>06/09/2015 20:25</span><br>
יפה מאד, אתר מדהים</div>
<a id="comment2841"></a>
<div class="blog-comment">
<span class='comment-author'>Splash</span><span dir="rtl">&nbsp;</span>
<span dir="ltr" class='comment-date'>01/10/2015 19:01</span><br>
שוחררה RC 4 </div>
<a id="comment2845"></a>
<div class="blog-comment">
<span class='comment-author'>intval</span><span dir="rtl">&nbsp;</span>
<span dir="ltr" class='comment-date'>04/10/2015 20:59</span><br>
תודה על העדכון :)</div>
<a id="comment2846"></a>
<div class="blog-comment">
<span class='comment-author'>MYSQL</span><span dir="rtl">&nbsp;</span>
<span dir="ltr" class='comment-date'>06/10/2015 02:22</span><br>
תוכל להרחיב עלPHPNG בבקשה?<br>
כמו כן למה יש צורך אחרי בדיקת$_GET[&apos;slug&apos;] לאפס אותו לריק?(הדוגמה הראשונה)</div>
<a id="comment2847"></a>
<div class="blog-comment">
<span class='comment-author'>Splash</span><span dir="rtl">&nbsp;</span>
<span dir="ltr" class='comment-date'>07/10/2015 13:10</span><br>
@MYSQL <br>
אין לי באמת מקום לכתוב על PHPNG ,אפשר לכתוב עליו מאמר שלם ולבצע השוואות בינו לבין HHVM אבל אין לי זמן לזה כרגע,אתה מוזמן לקרוא באינטרנט ,לתרגם ולפרסם פה.<br>
לגבי הקוד,לשום קוד פה אין באמת משמעות,בסך הכל דוגמאות שמראות את האפשרויות החדשות יש מקרים רבים שאתה לא יכול להסיק שהמשתנה באמת קיים ואתה תצטרך לבצע isset לפני שתעשה עליו פעולות,באותם מקרים אתה עלול לרצות שגם אם הערך לא קיים אז שיהיה לו ערך ברירת מחדל כמו למשל במקרה של עמודים,אם אתה לא מקבל את $_GET[&apos;page&apos;] אתה רוצה שהערך ברירת מחדל שלו יהיה 1 אז במקום לבצע תנאי isset אתה יכול להשתמש בכיתוב המקוצר.</div>
<a id="comment2852"></a>
<div class="blog-comment">
<span class='comment-author'>Splash</span><span dir="rtl">&nbsp;</span>
<span dir="ltr" class='comment-date'>12/11/2015 19:09</span><br>
שוחררה RC 7 ותאריך השחרור נדחה ל 26 בנובמבר (12 בנובמבר במקור) בהנחה שלא יהיו באגים קריטים היא תשוחרר בתאריך הנ&quot;ל,אחרת תצא RC 8 והשחרור ידחה ל 10 בדצמבר.(וחוזר חלילה עד אשר הגירסא תיהיה יציבה מספיק)</div>
<a id="comment2854"></a>
<div class="blog-comment">
<span class='comment-author'>intval</span><span dir="rtl">&nbsp;</span>
<span dir="ltr" class='comment-date'>14/11/2015 15:48</span><br>
מגניב ביותר. תודה על העדכונים השותפים</div>
</section>
</section>  
<section id="sidebar">
<section id="search_box">
<form method="get" action="http://www.google.co.il/search" id="search_form">
<input type="hidden" name="hl" value="iw">
<input type="checkbox" name="sitesearch" style="display:none" value="https://phpguide.co.il" checked="">
<input type="text" class="search_form" placeholder="חיפוש" name="q" id="search_field">
<input type="submit" value="" title="לחפש">
</form>
</section>
<style>.staticSidebarPageLinks a{color:#e85a2d;font-weight:bold;text-decoration:underline}</style>
<div class='rblock staticSidebarPageLinks' style="padding:0 -50px; width:100%; background: white;">
<a href="page_mvcebook.html" title="למד איך עובד MVC" onclick="Analytics.track('Promotion', 'click', 'GoToLanding', 'mvcebook-sidebar-banner1');">
ספר חינם על MVC
</a>
שאתה הולך להוריד כי אם אתה רוצה ללמוד על ארגון קוד יעיל ומודרני באתרים כמו זה או פייסבוק או כי כולם אוהבים להוריד דברים איכותיים בחינם מהאינטרנט
<br><br>
<a href='page_oopbook.html'>
ספר הלימוד - תכנות מונחה עצמים מאפס
</a>
שסוף סוף ילמד אותך פיתוח מונחה עצמים נכון בצורה פשוטה, יענה על כל השאלות ויכין אותך לרעיונות עבודה.
<br><br>
<a href='page_phpunit.html'>
קורס בדיקות יחידה phpunit
</a>
שיעזור לך להקטין בחצי את כמות הבאגים, את כאב הראש והזמן המבוזבז על פתירתם
<br><br>
<a href='page_mysqlinteractive.html'>
קורס mysql אינטרקטיבי
</a>
שיייקח אותך צעד אחר צעד למומחה שאילתות mysql לייב
<br><br><br>
<small>האתר ב-readonly
<br>
תודה לכל מי שתרם, ענה, שאל, כתב, לימד ועזר במשך השנים <br>
orelbey, splash, raslin, cayce, iiddaannyy, michael, kingyes, ilikeme, itamarhadad, iosolidar, jbstyle<br>
- alex@הדומיין הזה
</small>
</div>
</section>
</div>
<footer id='footer'>
</footer>
</div>  
<script type="text/javascript" src="//ajax.googleapis.com/ajax/libs/angularjs/1.2.6/angular.min.js"></script>
<script type="text/javascript" src="//ajax.googleapis.com/ajax/libs/angularjs/1.2.6/angular-resource.min.js"></script>
<script type="text/javascript" src="//ajax.googleapis.com/ajax/libs/angularjs/1.2.6/angular-cookies.min.js"></script>
<script type="text/javascript" src="assets\c2224fc8\jquery.min.js"></script>
<script type="text/javascript" src="static\scripts\scripts.compiled.js"></script>
<script type="text/javascript" src="static\scripts\plugins.js"></script>
<script type="text/javascript" src="static\scripts\ui.js"></script>
<script type="text/javascript" src="static\scripts\analytics.js"></script>
</body>
</html>
